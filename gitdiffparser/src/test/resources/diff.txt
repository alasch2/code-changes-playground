diff --git a/java-agent-events/src/main/java/io/sealights/onpremise/agentevents/engine/builders/AgentInstanceInfoBuilder.java b/java-agent-events/src/main/java/io/sealights/onpremise/agentevents/engine/builders/AgentInstanceInfoBuilder.java
index c8ecfd0d..1a1cc39a 100644
--- a/java-agent-events/src/main/java/io/sealights/onpremise/agentevents/engine/builders/AgentInstanceInfoBuilder.java
+++ b/java-agent-events/src/main/java/io/sealights/onpremise/agentevents/engine/builders/AgentInstanceInfoBuilder.java
@@ -84,14 +84,28 @@ class AgentInstanceInfoBuilder extends InfoBuilder<AgentInstanceInfo> implements
=		data.setProcessArch(realArch);
=	}
=
-	private void fillRunInfo() {
-		data.setCwd(DefaultDirs.WORKING_DIR);
+	protected void fillCmdLineArgs() {
=		String runCmd = JvmUtils.getRunCommand();
-		data.getArgv().addAll(Arrays.asList(runCmd.split(JVM_ARGS_SEPARATOR)));
-		
+		if (runCmd != null) {
+			addArguments(Arrays.asList(runCmd.split(JVM_ARGS_SEPARATOR)));
+		}
+	}
+	
+	protected void fillJvmArgs() {
=		RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();
-		List<String> arguments = runtimeMxBean.getInputArguments();
-		data.getArgv().addAll(arguments);
+		addArguments(runtimeMxBean.getInputArguments());
+	}
+	
+	private void addArguments(List<String> args) {
+		for (String argv : args) {
+			data.getArgv().add(CredentialsMaskFormatter.maskArgValue(argv));
+		}		
+	}
+	
+	private void fillRunInfo() {
+		data.setCwd(DefaultDirs.WORKING_DIR);
+		fillCmdLineArgs();
+		fillJvmArgs();
=	}
=	
=	// Implementation of SysEnvConsumer interface
diff --git a/java-agent-events/src/main/java/io/sealights/onpremise/agentevents/engine/builders/CredentialsMaskFormatter.java b/java-agent-events/src/main/java/io/sealights/onpremise/agentevents/engine/builders/CredentialsMaskFormatter.java
new file mode 100644
index 00000000..83e28932
--- /dev/null
+++ b/java-agent-events/src/main/java/io/sealights/onpremise/agentevents/engine/builders/CredentialsMaskFormatter.java
@@ -0,0 +1,46 @@
+package io.sealights.onpremise.agentevents.engine.builders;
+
+import lombok.experimental.UtilityClass;
+/**
+ * Encapsulates methods for masking of credential values
+ * (To be extended in the future)
+ * 
+ * @author AlaSchneider
+ *
+ */
+@UtilityClass
+public class CredentialsMaskFormatter {
+	
+	public static final String MASK = "***";
+	public static final String PASSWORD = "password";
+	public static final String USER = "user";
+	private static final String ASSIGN= "=";
+    
+	/**
+	 * Implements simple masking of credential values in the input argv string.
+	 * <p>Expects an argv as a key=value pair; replaces value to '***'.
+	 * <p>Supports keys that ends with 'password' or 'user' in any lower or upper case or mixed case.
+	 * 
+	 */
+    public String maskArgValue(String originalValue) {
+    	String lowerCase = originalValue.toLowerCase();
+    	if (lowerCase.contains(PASSWORD)) {
+    		return maskValue(originalValue);
+    	}
+    	
+    	if (lowerCase.contains(USER)) {
+    		return maskValue(originalValue);
+    	}
+    	
+    	return originalValue;
+    }
+    
+    private String maskValue(String originalValue) {
+    	String[] keyValuePair = originalValue.split(ASSIGN);
+    	if (keyValuePair.length == 2) {
+    		return keyValuePair[0] + ASSIGN + MASK;
+    	}
+    	else return originalValue;
+    }
+    
+}
diff --git a/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/tests/AgentCiInfoBuilderTest.java b/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/AgentCiInfoBuilderTest.java
similarity index 97%
rename from java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/tests/AgentCiInfoBuilderTest.java
rename to java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/AgentCiInfoBuilderTest.java
index 1e8ed9fb..700d6011 100644
--- a/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/tests/AgentCiInfoBuilderTest.java
+++ b/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/AgentCiInfoBuilderTest.java
@@ -1,4 +1,4 @@
-package io.sealights.onpremise.agentevents.engine.builders.tests;
+package io.sealights.onpremise.agentevents.engine.builders;
=
=import static io.sealights.onpremise.agentevents.engine.builders.CiInfoBuilder.JOB_ID_ENV;
=import static io.sealights.onpremise.agentevents.engine.builders.CiInfoBuilder.JOB_NAME_ENV;
diff --git a/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/tests/AgentStartInfoBuilderTest.java b/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/AgentStartInfoBuilderTest.java
similarity index 97%
rename from java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/tests/AgentStartInfoBuilderTest.java
rename to java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/AgentStartInfoBuilderTest.java
index 76d67e4a..3773f7ed 100644
--- a/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/tests/AgentStartInfoBuilderTest.java
+++ b/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/AgentStartInfoBuilderTest.java
@@ -1,16 +1,15 @@
-package io.sealights.onpremise.agentevents.engine.builders.tests;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+package io.sealights.onpremise.agentevents.engine.builders;
=
=import java.util.List;
=import java.util.Map;
=
=import org.junit.Test;
=
-import io.sealights.onpremise.agentevents.engine.builders.AgentStartInfoBuilder;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
=import io.sealights.onpremise.agentevents.eventservice.proxy.api.types.AgentStartInfo.AgentInstanceInfo;
=import io.sealights.onpremise.agentevents.eventservice.proxy.api.types.AgentStartInfo.JavaEnvInfo;
=import io.sealights.onpremise.agentevents.eventservice.proxy.api.types.AgentStartInfo.MachineInfo;
diff --git a/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/CredentialsMaskFormatterTest.java b/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/CredentialsMaskFormatterTest.java
new file mode 100644
index 00000000..d0c244af
--- /dev/null
+++ b/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/CredentialsMaskFormatterTest.java
@@ -0,0 +1,36 @@
+package io.sealights.onpremise.agentevents.engine.builders;
+
+import org.testng.annotations.DataProvider;
+import org.testng.annotations.Test;
+import static org.testng.Assert.assertEquals;
+
+public class CredentialsMaskFormatterTest {
+	
+	@DataProvider
+	public static Object[][] maskArgvInput() {
+		return new Object[][] {
+			//input                           expected
+			// UPPER_CASE
+			{"-DPRAM_USER_USER=pram",         "-DPRAM_USER_USER=***" },
+			{"-DPRAM_USER_PASSWORD=prampass", "-DPRAM_USER_PASSWORD=***" },
+			
+			// UPPER_CASE with spaces			
+			{"-DPRAM_USER_USER =pram",         "-DPRAM_USER_USER =***" },
+			{"-DPRAM_USER_USER = pram",        "-DPRAM_USER_USER =***" },
+			{"-DPRAM_USER_PASSWORD= prampass", "-DPRAM_USER_PASSWORD=***" },
+			
+			// Lower-case, no spaces
+			{"-Dspring.data.mysql.password=QWE1234", "-Dspring.data.mysql.password=***"  },
+			{"-Dspring.data.mysql.user=admin",       "-Dspring.data.mysql.user=***"  },
+			
+			// No masking is expected
+			{"-Dother=pram",         "-Dother=pram"  },			
+		};
+	}
+    
+    @Test(dataProvider="maskArgvInput")
+    public void maskArgvValue_credentialMasked(String input, String expected) {
+    	assertEquals(CredentialsMaskFormatter.maskArgValue(input), expected);
+    }
+    
+}
diff --git a/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/FillCmdArgsTest.java b/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/FillCmdArgsTest.java
new file mode 100644
index 00000000..dc47a06a
--- /dev/null
+++ b/java-agent-events/src/test/java/io/sealights/onpremise/agentevents/engine/builders/FillCmdArgsTest.java
@@ -0,0 +1,73 @@
+package io.sealights.onpremise.agentevents.engine.builders;
+
+import java.util.List;
+
+import org.testng.annotations.AfterMethod;
+import org.testng.annotations.BeforeMethod;
+import org.testng.annotations.DataProvider;
+import org.testng.annotations.Test;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import static org.testng.Assert.assertTrue;
+
+import io.sealights.onpremise.agentevents.engine.AgentDescriptor;
+import io.sealights.onpremise.agentevents.engine.AgentInputRequests.AgentStartRequest;
+import io.sealights.onpremise.agents.infra.constants.Constants;
+import io.sealights.onpremise.agents.infra.utils.jvm.JvmUtils;
+
+public class FillCmdArgsTest {
+	
+    private static String START_ARGS = "org.apache.catalina.startup.Bootstrap start -javaagent:/deployments/sealights/bin/sl-test-listener.jar";
+    private static String OPTS_ARGS_1 = "-Dsl.httpRequestsLogLocation=/tmp/sealights -Dsl.tags=backend";
+    private static String USER_ARG1 = "-DPRAM_USER_USER=pram";
+    private static String PWD_ARG1 = "-DPRAM_USER_PASSWORD=prampass";
+    private static String USER_ARG2 = "-Dspring.data.mysql.user=admin";
+    private static String PWD_ARG2 = "-Dspring.data.mysql.password=QWE1234";
+    private static String OPTS_ARGS_2 = "-Djdk.tls.ephemeralDHKeySize=2048 -Xmx2048m";
+
+	private String savePropValue;
+	
+	@DataProvider
+	public static Object[][] jvmCmdInput() {
+		return new Object[][] {
+			//input
+			// 2 pwd and user in a single cmd
+			{USER_ARG1 + " " + PWD_ARG1 + " " + USER_ARG2 + " " + PWD_ARG2 },
+			{START_ARGS + " " + OPTS_ARGS_1 + " " + USER_ARG1 + " " + PWD_ARG1 + " " + OPTS_ARGS_2},
+		};
+	}
+	
+	@BeforeMethod
+	public void setup() {
+		savePropValue = JvmUtils.getRunCommand();
+	}
+	
+	@AfterMethod
+	public void cleanup() {
+		System.setProperty(Constants.SysProps.JAVA_RUN_COMMAND, savePropValue);
+	}
+	
+	@Test(dataProvider="jvmCmdInput")
+	public void testFillCmdLineArgs(String cmdValue) {
+		System.setProperty(Constants.SysProps.JAVA_RUN_COMMAND, cmdValue);
+		AgentStartRequest startRequest = mock(AgentStartRequest.class);
+		when(startRequest.getAgentDescriptor()).thenReturn(mock(AgentDescriptor.class));
+		AgentInstanceInfoBuilder builder = new AgentInstanceInfoBuilder(startRequest);
+		builder.fillCmdLineArgs();
+		assertArgs(builder.data.getArgv());
+	}
+	
+	private void assertArgs(List<String> args) {
+		for (String arg : args) {
+			if (arg.toLowerCase().contains(CredentialsMaskFormatter.PASSWORD)) {
+				assertTrue(arg.endsWith(CredentialsMaskFormatter.MASK));
+			}
+			if (arg.toLowerCase().contains(CredentialsMaskFormatter.USER)) {
+				assertTrue(arg.endsWith(CredentialsMaskFormatter.MASK));
+			}
+		}
+	}
+
+}
diff --git a/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitDiffsCliCommand.java b/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitDiffsCliCommand.java
index 6f4ee254..6a8830f8 100644
--- a/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitDiffsCliCommand.java
+++ b/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitDiffsCliCommand.java
@@ -66,10 +66,9 @@ public class GitDiffsCliCommand extends GitDataDiscoveryCliCommand {
=    	}
=    	
=    	if (getConfiguration().isDebugInfoEnabled()) {
-    		LOG.debug("git-diff-cli output ({} lines): {}", getCliOutput().size(), toStringCliOuptput());
-    		getGitWorkMonitor().addDebug(String.format("git-diff-cli output: %s", toStringCliOuptput()));
+    		getGitWorkMonitor().addDebug(String.format("GIT-DIF: cli output (%s lines): %s", getCliOutput().size(), toStringCliOuptput()));
=    		if (!getGitDiscoveryData().getModulesMap().isEmpty()) {
-    			getGitWorkMonitor().addDebug(String.format("git-diff-cli result details:%s", 
+    			getGitWorkMonitor().addDebug(String.format("git-diff handling resluts:%s", 
=    					DEBUG_DATA_PRINTER.toStringFullData(getGitDiscoveryData().getDebugData())));
=    		}
=    	}
diff --git a/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitLogCliCommand.java b/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitLogCliCommand.java
index 09dd4e80..be48097b 100644
--- a/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitLogCliCommand.java
+++ b/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitLogCliCommand.java
@@ -88,9 +88,6 @@ public class GitLogCliCommand extends GitDataDiscoveryCliCommand {
=	private void addNewCommit(CommitParseData commitParseData) {
=		List<GitCommitData> commitDetails = getGitDiscoveryData().getCommitDetails();
=		currentCommitIndex = commitDetails.size();
-		if (currentCommitIndex == 0) {
-			gitData().setHeadCommit(commitParseData.getCommit());
-		}
=		GitCommitData commitData = commitParseData.getGitCommitData();
=		int contributorIndex = addCommitContributors(commitParseData);
=		commitData.setIndex(currentCommitIndex);
@@ -134,6 +131,7 @@ public class GitLogCliCommand extends GitDataDiscoveryCliCommand {
=    	}
=    	
=    	if (getConfiguration().isDebugInfoEnabled()) {
+    		getGitWorkMonitor().addDebug(String.format("GIT_LOG: cli output (%s lines): %s", getCliOutput().size(), toStringCliOuptput()));
=    		reportIgnoredFiles();
=    	}
=    }
@@ -143,8 +141,7 @@ public class GitLogCliCommand extends GitDataDiscoveryCliCommand {
=    		StringBuilder builder = new StringBuilder();
=    		builder.append(FILES_IGNORED_MESSAGE)
=    		.append(String.format("%noldToNewFileNames:%s", getGitDiscoveryData().getOldToNewFileNames()))
-    		.append(String.format("%nignored files:%s", getGitDiscoveryData().getDebugData().getIgnoredInLogFiles()))
-    		.append(String.format("%ngit-diff-cli output (%s lines): %s", getCliOutput().size(), toStringCliOuptput()));
+    		.append(String.format("%nignored files:%s", getGitDiscoveryData().getDebugData().getIgnoredInLogFiles()));
=    		getGitWorkMonitor().addDebug(builder.toString());
=    	}
=    }
diff --git a/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/controller/CollectGitDataStep.java b/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/controller/CollectGitDataStep.java
index 434b2d90..7ea45788 100644
--- a/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/controller/CollectGitDataStep.java
+++ b/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/controller/CollectGitDataStep.java
@@ -2,7 +2,6 @@ package io.sealights.onpremise.agents.infra.git.controller;
=
=import static io.sealights.onpremise.agents.infra.git.utils.GitUtils.shortId;
=
-import org.eclipse.jgit.revwalk.RevCommit;
=import org.slf4j.Logger;
=
=import io.sealights.onpremise.agents.infra.git.api.GitDataPrinter;
@@ -89,34 +88,26 @@ public class CollectGitDataStep extends GitWorkProcStep<GitData, CollectGitDataS
=		// if ref commit is null -> first build of branch + collect HEAD commit for the next build
=		// if sendFullData is true -> first build of branch or first run of the feature + collect HEAD commit for the next build
=		// if ref commit exists and sendFullData is false -> do a diff and collect relevant contributors and commits
-		if (refCommitData.getCommit() != null  && !refCommitData.isSendFullData()) {
+		if (refCommitData.isSendFullData()) {
+			getGitWorkMonitor().addInfo(COLLECT_FOR_REGULAR_BUILD_MSG + "collecting full files tree without diffs", true);
+			collectFullFilesTree();
+			return;
+		}
+		
+		fillHeadCommit();
+		
+		if (refCommitData.getCommit() != null) {
=			getGitWorkMonitor().addInfo(
=					COLLECT_FOR_REGULAR_BUILD_MSG + 
=					String.format("collect incremental diffs by ref-commit %s", shortId(refCommitData.getCommit())), true);
=			collectGitDiffs();			
-			if (gitDiscoveryData.getCommitDetails().isEmpty()) {
-				// Head commit should not be null, even if no new commits were found
-				setHeadCommit(refCommitData.getCommit());
-			}
=			setRefCommit(refCommitData.getCommit());
-		}
+		}		
=		else {
-			if (!refCommitData.isSendFullData()) {
-				getGitWorkMonitor().addInfo(
-						COLLECT_FOR_REGULAR_BUILD_MSG + "collecting HEAD commit only" + NO_REF_COMMIT_MSG,
-						true);
-				RevCommit headCommit = getCommandFactory().createGitHeadCommitCommand(getGitRepo()).run();
-				if (headCommit != null) {				
-					setRefCommit(headCommit.getName());
-				}
-				else {
-					getGitWorkMonitor().addWarning(COLLECT_FOR_REGULAR_BUILD_MSG + "HEAD commit was not found" + NO_REF_COMMIT_MSG);
-				}
-			}
-			else {
-				getGitWorkMonitor().addInfo(COLLECT_FOR_REGULAR_BUILD_MSG + "collecting full files tree without diffs", true);
-				collectFullFilesTree();
-			}
+			getGitWorkMonitor().addInfo(
+					COLLECT_FOR_REGULAR_BUILD_MSG + "collecting HEAD commit only" + NO_REF_COMMIT_MSG,
+					true);
+			setRefCommit(getData().getHeadCommit());
=		}
=	}
=	
@@ -139,6 +130,16 @@ public class CollectGitDataStep extends GitWorkProcStep<GitData, CollectGitDataS
=		setHeadCommit(getTreeCommand.getHeadCommitId());
=	}
=	
+	protected void fillHeadCommit() {
+		String headCommit = getCommandFactory().createGitHeadCommitCommand(getGitRepo()).run();
+		if (headCommit == null) {				
+			getGitWorkMonitor().addWarning(COLLECT_FOR_REGULAR_BUILD_MSG + "HEAD commit was not found" + NO_REF_COMMIT_MSG);
+		}
+		else {			
+			setHeadCommit(headCommit);
+		}		
+	}
+	
=	private void setRefCommit(String refCommit) {
=		getData().getBuildDiff().setRefCommit(refCommit);
=	}
diff --git a/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/jgit/commands/GitHeadCommitCommand.java b/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/jgit/commands/GitHeadCommitCommand.java
index dc322d28..1842474f 100644
--- a/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/jgit/commands/GitHeadCommitCommand.java
+++ b/java-agent-git/src/main/java/io/sealights/onpremise/agents/infra/git/jgit/commands/GitHeadCommitCommand.java
@@ -1,15 +1,14 @@
=package io.sealights.onpremise.agents.infra.git.jgit.commands;
=
+import org.eclipse.jgit.api.LogCommand;
=import org.eclipse.jgit.revwalk.RevCommit;
-import org.eclipse.jgit.revwalk.filter.RevFilter;
=import org.slf4j.Logger;
=
=import io.sealights.onpremise.agents.infra.git.utils.GitCommand;
=import io.sealights.onpremise.agents.infra.git.utils.GitRepo;
=import io.sealights.onpremise.agents.infra.logging.LogFactory;
-import lombok.SneakyThrows;
=
-public class GitHeadCommitCommand extends GitCommand<RevCommit> {
+public class GitHeadCommitCommand extends GitCommand<String> {
=
=	private static Logger LOG = LogFactory.getLogger(GitHeadCommitCommand.class);
=	
@@ -18,15 +17,30 @@ public class GitHeadCommitCommand extends GitCommand<RevCommit> {
=	}
=
=	@Override
-	@SneakyThrows
-	protected RevCommit collectData() {
+	protected String collectData() {
=		LOG.debug("retrieving head commit ...");
-		Iterable<RevCommit> history = getOneLogEntry();
-		return history.iterator().next();
+		RevCommit headCommit = getHeadLogEntry();
+		if (headCommit != null) {
+			LOG.info("found head commit {}", headCommit.getName());
+			return headCommit.getName();
+		}
+		return null;
=	}
=	
-	@SneakyThrows
-	private Iterable<RevCommit> getOneLogEntry() {
-		return getGit().log().setMaxCount(1).setRevFilter(RevFilter.NO_MERGES).call();
+	private RevCommit getHeadLogEntry() {
+		RevCommit headCommit = null;
+		Iterable<RevCommit> gitLog;
+		try {
+			LogCommand logCmd = getGit().log().setMaxCount(1);
+			gitLog = logCmd.call();
+			for (RevCommit revCommit: gitLog) {
+				headCommit = revCommit;
+				break;
+			} 
+		}
+		catch (Exception e) {
+			// Exception may be thrown even if git have no commits
+		}
+		return headCommit;
=	}
=}
diff --git a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitLogCliCommandTest.java b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitLogCliCommandTest.java
index a46ae237..df8889bc 100644
--- a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitLogCliCommandTest.java
+++ b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/cli/commands/GitLogCliCommandTest.java
@@ -135,7 +135,6 @@ public class GitLogCliCommandTest extends GitDataDiscoveryCliCommandTestBase<Git
=		assertEquals(commitsSize, gitData.getCommitDetails().size());
=		assertEquals(contributorsSize, gitData.getContributors().size());
=		assertEquals(filesSize, gitData.getModulesMap().get(DEFAULT_WORKSPACE_PATH).size());
-		assertEquals(COMMIT, gitData.getGitData().getHeadCommit());
=	}
=	
=	@SneakyThrows
diff --git a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/BuildSessionCreator.java b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/BuildSessionCreator.java
index 2d74bb55..9534c95b 100644
--- a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/BuildSessionCreator.java
+++ b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/BuildSessionCreator.java
@@ -2,7 +2,7 @@ package io.sealights.onpremise.agents.infra.git.controller;
=
=import io.sealights.onpremise.agents.infra.types.BuildSessionData;
=import io.sealights.onpremise.agents.infra.types.BuildSessionData.BuildSessionType;
-import io.sealights.onpremise.agents.infra.types.BuildSessionData.PullRequestParams;
+import io.sealights.onpremise.agents.infra.types.PullRequestParams;
=
=public class BuildSessionCreator {
=	public static final String TARGET_BRANCH = "target-branch";
diff --git a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/CollectGitDataStepTest.java b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/CollectGitDataStepTest.java
index f73b8436..dd841935 100644
--- a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/CollectGitDataStepTest.java
+++ b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/CollectGitDataStepTest.java
@@ -11,13 +11,13 @@ import static org.mockito.Mockito.when;
=
=import static org.mockito.Matchers.any;
=
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertNotNull;
+import static org.junit.Assert.assertEquals;
=
=import io.sealights.onpremise.agents.infra.git.api.GitFilesTypes.RefCommitData;
=import io.sealights.onpremise.agents.infra.git.cli.commands.GitDiffsCliCommand;
=import io.sealights.onpremise.agents.infra.git.cli.commands.GitLogCliCommand;
=import io.sealights.onpremise.agents.infra.git.configuration.GitWorkConfiguration;
+import io.sealights.onpremise.agents.infra.git.jgit.commands.GitHeadCommitCommand;
=import io.sealights.onpremise.agents.infra.git.jgit.commands.GitTreeFilesCommand;
=import io.sealights.onpremise.agents.infra.git.utils.GitCommandInternalTypes.GitDiscoveryData;
=import io.sealights.onpremise.agents.infra.git.utils.GitCommandInternalTypes.ModulesMap;
@@ -27,6 +27,7 @@ import io.sealights.onpremise.agents.infra.types.BuildSessionData;
=public class CollectGitDataStepTest extends GitControllerTestBase {
=
=	private static String REF_COMMIT = "12345";
+	private static String HEAD_COMMIT = "34567gg";
=	private CollectGitDataStep step;
=	
=	@Before
@@ -41,7 +42,7 @@ public class CollectGitDataStepTest extends GitControllerTestBase {
=		step = spy(new CollectGitDataStep(gitController));
=		step.executeStep(createCollectGitDataStepInput(false, BS_DATA));
=		assertEquals(REF_COMMIT, step.getGitDiscoveryData().getReferenceId());
-		assertNotNull(step.getData().getHeadCommit());
+		assertEquals(HEAD_COMMIT, step.getData().getHeadCommit());
=		verify(step).executeRegularBuild();
=		verify(step).collectGitDiffs();
=		verify(step, never()).collectFullFilesTree();
@@ -52,7 +53,7 @@ public class CollectGitDataStepTest extends GitControllerTestBase {
=		step = spy(new CollectGitDataStep(gitController));
=		step.executeStep(createCollectGitDataStepInput(true, BS_DATA));
=		assertEquals(REF_COMMIT, step.getGitDiscoveryData().getReferenceId());
-		assertNotNull(step.getData().getHeadCommit());
+		assertEquals(HEAD_COMMIT, step.getData().getHeadCommit());
=		verify(step).executeRegularBuild();
=		verify(step).collectFullFilesTree();
=		verify(step, never()).collectGitDiffs();
@@ -76,13 +77,24 @@ public class CollectGitDataStepTest extends GitControllerTestBase {
=		GitCommandFactory factory = mock(GitCommandFactory.class);
=		GitDiffsCliCommand diffCmd = mock(GitDiffsCliCommand.class);
=		GitLogCliCommand logCmd = mock(GitLogCliCommand.class);
-		GitTreeFilesCommand getTreeCmd = mock(GitTreeFilesCommand.class);
-		when(getTreeCmd.getHeadCommitId()).thenReturn(REF_COMMIT);
-		when(getTreeCmd.run()).thenReturn(new ModulesMap());
=		when(factory.createRefCommitDiffsCliCommand(any(GitRepo.class), any(GitDiscoveryData.class), any(GitWorkConfiguration.class))).thenReturn(diffCmd);
=		when(factory.createRefCommitLogCliCommand(any(GitRepo.class), any(GitDiscoveryData.class), any(GitWorkConfiguration.class))).thenReturn(logCmd);
-		when(factory.createGitTreeFilesCommand(any(GitRepo.class))).thenReturn(getTreeCmd);
+		mockGetTree(factory);
+		mockGetHeadCommit(factory);
=		gitController.getGitWorkMonitor().setCommandFactory(factory);
=		gitController.getGitRepo().setGitExeFound(true);
=	}
+	
+	private void mockGetTree(GitCommandFactory factory) {
+		GitTreeFilesCommand getTreeCmd = mock(GitTreeFilesCommand.class);
+		when(getTreeCmd.getHeadCommitId()).thenReturn(HEAD_COMMIT);
+		when(getTreeCmd.run()).thenReturn(new ModulesMap());		
+		when(factory.createGitTreeFilesCommand(any(GitRepo.class))).thenReturn(getTreeCmd);
+	}
+	
+	private void mockGetHeadCommit(GitCommandFactory factory) {
+		GitHeadCommitCommand headCommitCmd = mock(GitHeadCommitCommand.class);
+		when(factory.createGitHeadCommitCommand(any(GitRepo.class))).thenReturn(headCommitCmd);
+		when(headCommitCmd.run()).thenReturn(HEAD_COMMIT);
+	}
=}
diff --git a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/PrepareBSDataStepTest.java b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/PrepareBSDataStepTest.java
index bd73f98f..56a7f57a 100644
--- a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/PrepareBSDataStepTest.java
+++ b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/controller/PrepareBSDataStepTest.java
@@ -18,7 +18,7 @@ import static org.junit.Assert.assertNull;
=
=import io.sealights.onpremise.agents.infra.serviceproxy.buildsession.BuildSessionServiceProxy;
=import io.sealights.onpremise.agents.infra.types.BuildSessionData;
-import io.sealights.onpremise.agents.infra.types.BuildSessionData.PullRequestParams;
+import io.sealights.onpremise.agents.infra.types.PullRequestParams;
=
=public class PrepareBSDataStepTest extends GitControllerTestBase {
=
diff --git a/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/jgit/commands/GitHeadCommitCommandTest.java b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/jgit/commands/GitHeadCommitCommandTest.java
new file mode 100644
index 00000000..7d83e955
--- /dev/null
+++ b/java-agent-git/src/test/java/io/sealights/onpremise/agents/infra/git/jgit/commands/GitHeadCommitCommandTest.java
@@ -0,0 +1,42 @@
+package io.sealights.onpremise.agents.infra.git.jgit.commands;
+
+import java.io.File;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+import io.sealights.onpremise.agents.infra.git.utils.GitCommandJUnitTestBase;
+import io.sealights.onpremise.agents.infra.git.utils.GitRepo;
+import io.sealights.onpremise.agents.infra.git.utils.TestDataConstants;
+
+public class GitHeadCommitCommandTest extends GitCommandJUnitTestBase {
+	
+	private GitHeadCommitCommand proc;
+
+	@Before
+	public void setUp() {
+		super.setUp();
+		proc = new GitHeadCommitCommand(new GitRepo(git, gitWorkMonitor));
+	}
+	
+	@Test
+	public void execute_emptyRepository_returnsNull() {
+		assertNull(proc.run());
+	}
+	
+	@Test
+	public void execute_hasCommits_returnsHeadCommit() {
+		String[] fileNamesToCommit = {
+				TestDataConstants.FOLDER1 + File.separator + TestDataConstants.FILE1, 
+				TestDataConstants.FOLDER1 + File.separator + TestDataConstants.FOLDER2 + File.separator + TestDataConstants.FILE2, 
+				TestDataConstants.FOLDER3 + File.separator + TestDataConstants.FILE3, 
+				TestDataConstants.FILE4
+				};
+		commitFilesToGit(fileNamesToCommit);
+		assertNotNull(proc.run());
+	}
+	
+}
diff --git a/java-agent-http-client/src/main/java/io/sealights/onpremise/agents/infra/http/api/HttpClientLogFormatter.java b/java-agent-http-client/src/main/java/io/sealights/onpremise/agents/infra/http/api/HttpClientLogFormatter.java
index c1f11019..c0b39cb6 100644
--- a/java-agent-http-client/src/main/java/io/sealights/onpremise/agents/infra/http/api/HttpClientLogFormatter.java
+++ b/java-agent-http-client/src/main/java/io/sealights/onpremise/agents/infra/http/api/HttpClientLogFormatter.java
@@ -33,8 +33,6 @@ public class HttpClientLogFormatter {
=		else {
=			printable = bodyJson;
=		}
-		//TEMP
-		printable = bodyJson;
=		return String.format(", body:'%s'", printable);
=	}
=	
diff --git a/java-agent-infra-service-proxies/src/main/java/io/sealights/onpremise/agents/infra/serviceproxy/buildsession/BuildSessionCreateData.java b/java-agent-infra-service-proxies/src/main/java/io/sealights/onpremise/agents/infra/serviceproxy/buildsession/BuildSessionCreateData.java
index aba74742..7c69da89 100644
--- a/java-agent-infra-service-proxies/src/main/java/io/sealights/onpremise/agents/infra/serviceproxy/buildsession/BuildSessionCreateData.java
+++ b/java-agent-infra-service-proxies/src/main/java/io/sealights/onpremise/agents/infra/serviceproxy/buildsession/BuildSessionCreateData.java
@@ -20,8 +20,8 @@ public class BuildSessionCreateData extends BuildSessionData {
=			buildSessionData.getBuildSessionId(),
=			buildSessionData.getAdditionalParams());
=		setPullRequestParams(buildSessionData.getPullRequestParams());
-		super.setBuildSessionType(BUILD);
=		setCustomerId(buildSessionData.getCustomerId());
+		setBuildSessionType(BUILD);
=	}
=	
=	public BuildSessionCreateData(PullRequestBuildSessionCreateData prBuildSessionCreateData) {
@@ -30,7 +30,11 @@ public class BuildSessionCreateData extends BuildSessionData {
=		getAdditionalParams().setPackagesIncluded(prBuildSessionCreateData.getPackagesIncluded());
=		getAdditionalParams().setPackagesExcluded(prBuildSessionCreateData.getPackagesExcluded());
=		setPullRequestParams(prBuildSessionCreateData.getPullRequestParams());
-		super.setBuildSessionType(PULLREQUEST);
+		setBuildSessionType(PULLREQUEST);
+	}
+
+	@Override
+	public String toString() {
=		return String.format("[buildSessionData %s, pullRequestParams=%s]", super.toStringData(), getPullRequestParams());
=	}
=
diff --git a/java-agent-infra-service-proxies/src/test/java/io/sealights/onpremise/agents/infra/serviceproxy/buildsession/BuildSessionServiceProxyTest.java b/java-agent-infra-service-proxies/src/test/java/io/sealights/onpremise/agents/infra/serviceproxy/buildsession/BuildSessionServiceProxyTest.java
index 4f2126bf..a003de9c 100644
--- a/java-agent-infra-service-proxies/src/test/java/io/sealights/onpremise/agents/infra/serviceproxy/buildsession/BuildSessionServiceProxyTest.java
+++ b/java-agent-infra-service-proxies/src/test/java/io/sealights/onpremise/agents/infra/serviceproxy/buildsession/BuildSessionServiceProxyTest.java
@@ -1,10 +1,5 @@
=package io.sealights.onpremise.agents.infra.serviceproxy.buildsession;
=
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertFalse;
-import static org.testng.Assert.assertNotNull;
-import static org.testng.Assert.assertNull;
-
=import java.io.File;
=import java.io.IOException;
=import java.nio.file.Files;
@@ -33,6 +28,7 @@ import io.sealights.onpremise.agents.infra.http.api.SLHttpRequest;
=import io.sealights.onpremise.agents.infra.http.api.SLHttpResult;
=import io.sealights.onpremise.agents.infra.http.client.SLApacheHttpClient;
=import io.sealights.onpremise.agents.infra.http.client.SLHttpClientMockUtils;
+import io.sealights.onpremise.agents.infra.types.AdditionalArgumentsData;
=import io.sealights.onpremise.agents.infra.types.BuildSessionData;
=import io.sealights.onpremise.agents.infra.types.PullRequestParams;
=
@@ -40,6 +36,10 @@ public class BuildSessionServiceProxyTest extends ServiceProxyTestBase {
=	
=	private static final String FAKE_SESSION_ID_MDG = "Fake session id";
=	private static final String BS_ID_FILE = "bsid_file.txt";
+	private static final String APP = "app";
+	private static final String BUILD = "build";
+	private static final String BRANCH = "branch";
+	private static final String INCLUDES = "include*";
=	private static final String REPOSITORY_URL = "repositoryUrl";
=	private static final int PULL_REQUEST_NUMBER = 1;
=	private static final String LATEST_COMMIT = "latestCommit";
diff --git a/java-agent-infra/src/main/java/io/sealights/onpremise/agents/infra/utils/StringUtils.java b/java-agent-infra/src/main/java/io/sealights/onpremise/agents/infra/utils/StringUtils.java
index 34e0908e..e6c0dde1 100644
--- a/java-agent-infra/src/main/java/io/sealights/onpremise/agents/infra/utils/StringUtils.java
+++ b/java-agent-infra/src/main/java/io/sealights/onpremise/agents/infra/utils/StringUtils.java
@@ -132,10 +132,13 @@ public final class StringUtils {
=		return null;
=	}
=	
+	/**
+	 * Removed any \r and splits to lines by \n chars
+	 */
=	public static String[] splitToLines(String original) {
=		if (original != null) {
-			original.replace(END_R, EMPTY_STRING);
-			String[] lines = original.split(REPLACE_END_N_PATTERN);
+			String temp = original.replace(END_R, EMPTY_STRING);
+			String[] lines = temp.split(REPLACE_END_N_PATTERN);
=			// remove /n from the last
=			if (lines.length > 1) {
=				lines[lines.length-1].replace(EOL, EMPTY_STRING);
diff --git a/java-agent-infra/src/test/java/io/sealights/onpremise/agents/infra/tests/utils/StringUtilsTest.java b/java-agent-infra/src/test/java/io/sealights/onpremise/agents/infra/tests/utils/StringUtilsTest.java
index c6ae08d8..60a38a49 100644
--- a/java-agent-infra/src/test/java/io/sealights/onpremise/agents/infra/tests/utils/StringUtilsTest.java
+++ b/java-agent-infra/src/test/java/io/sealights/onpremise/agents/infra/tests/utils/StringUtilsTest.java
@@ -210,6 +210,9 @@ public class StringUtilsTest {
=			assertNotNull(lines);
=			assertEquals(lines.length, expectedLinesSize);
=			assertFalse(lines[lines.length-1].contains(EOL));
+			for (String l: lines) {
+				assertFalse(l.contains(END_R), String.format("wrong line:[%s]", l));
+			}
=		}
=		else {
=			assertNull(lines);
